// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlateTracker.data.Models;

namespace PlateTracker.data.Migrations
{
    [DbContext(typeof(TechnicalPlatingContext))]
    [Migration("20210126235818_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("PlateTracker.data.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID")
                        .UseIdentityColumn();

                    b.Property<string>("BuddyPunchId")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("BuddyPunchID");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<DateTime>("CreatedDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EmployeeFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmployeeLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("PlateTracker.data.Models.LineType", b =>
                {
                    b.Property<int>("LineTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LineTypeID")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<DateTime>("DatetimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DatetimeUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("LineTypeDescription")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("LineTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.HasKey("LineTypeId");

                    b.ToTable("LineType");
                });

            modelBuilder.Entity("PlateTracker.data.Models.TankMeasurement", b =>
                {
                    b.Property<long>("TankMeasurementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("TankMeasurementID")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<DateTime>("DatetimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DatetimeUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("TankMeasurementDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("TankMeasurementEmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("TankMeasurementEmployeeID");

                    b.Property<int>("TankMeasurementTankTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TankMeasurementTankTypeID");

                    b.Property<int>("TankMeasurementTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TankMeasurementTypeID");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,0)");

                    b.HasKey("TankMeasurementId");

                    b.HasIndex("TankMeasurementEmployeeId");

                    b.HasIndex("TankMeasurementTankTypeId");

                    b.HasIndex("TankMeasurementTypeId");

                    b.ToTable("TankMeasurement");
                });

            modelBuilder.Entity("PlateTracker.data.Models.TankMeasurementNominal", b =>
                {
                    b.Property<int>("TankMeasurementNominalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TankMeasurementNominalID")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<DateTime>("DatetimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DatetimeUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("HighNominalValue")
                        .HasColumnType("int");

                    b.Property<int>("IdealNominalValue")
                        .HasColumnType("int");

                    b.Property<int>("IdealTestingFrequencyDays")
                        .HasColumnType("int");

                    b.Property<int>("LowNominalValue")
                        .HasColumnType("int");

                    b.Property<int>("MinimumTestingFrequencyDays")
                        .HasColumnType("int");

                    b.Property<int>("TankMeasurementTankTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TankMeasurementTankTypeID");

                    b.Property<int>("TankMeasurementTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TankMeasurementTypeID");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.HasKey("TankMeasurementNominalId");

                    b.HasIndex("TankMeasurementTypeId");

                    b.HasIndex(new[] { "TankMeasurementTankTypeId", "TankMeasurementTypeId" }, "uq_TankMeasurementNominal")
                        .IsUnique();

                    b.ToTable("TankMeasurementNominal");
                });

            modelBuilder.Entity("PlateTracker.data.Models.TankMeasurementTankType", b =>
                {
                    b.Property<int>("TankMeasurementTankTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TankMeasurementTankTypeID")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<DateTime>("DatetimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DatetimeUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("LineTypeId")
                        .HasColumnType("int")
                        .HasColumnName("LineTypeID");

                    b.Property<string>("TankMeasurementTankTypeDescription")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("TankMeasurementTankTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.HasKey("TankMeasurementTankTypeId");

                    b.HasIndex("LineTypeId");

                    b.ToTable("TankMeasurementTankType");
                });

            modelBuilder.Entity("PlateTracker.data.Models.TankMeasurementType", b =>
                {
                    b.Property<int>("TankMeasurementTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TankMeasurementTypeID")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.Property<DateTime>("DatetimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DatetimeUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("TankMeasurementTypeDescription")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("TankMeasurementTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Uom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("UOM");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("('SYSTEM')");

                    b.HasKey("TankMeasurementTypeId");

                    b.ToTable("TankMeasurementType");
                });

            modelBuilder.Entity("PlateTracker.data.Models.TankMeasurement", b =>
                {
                    b.HasOne("PlateTracker.data.Models.Employee", "Employee")
                        .WithMany("TankMeasurements")
                        .HasForeignKey("TankMeasurementEmployeeId")
                        .HasConstraintName("FK_TankMeasurement_Employee")
                        .IsRequired();

                    b.HasOne("PlateTracker.data.Models.TankMeasurementTankType", "TankMeasurementTankType")
                        .WithMany("TankMeasurements")
                        .HasForeignKey("TankMeasurementTankTypeId")
                        .HasConstraintName("FK_TankMeasurement_TankMeasurementTankType")
                        .IsRequired();

                    b.HasOne("PlateTracker.data.Models.TankMeasurementType", "TankMeasurementType")
                        .WithMany("TankMeasurements")
                        .HasForeignKey("TankMeasurementTypeId")
                        .HasConstraintName("FK_TankMeasurement_TankMeasurementType")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("TankMeasurementTankType");

                    b.Navigation("TankMeasurementType");
                });

            modelBuilder.Entity("PlateTracker.data.Models.TankMeasurementNominal", b =>
                {
                    b.HasOne("PlateTracker.data.Models.TankMeasurementTankType", "TankMeasurementTankType")
                        .WithMany("TankMeasurementNominals")
                        .HasForeignKey("TankMeasurementTankTypeId")
                        .HasConstraintName("FK_TankMeasurementNominal_TankMeasurementNominal")
                        .IsRequired();

                    b.HasOne("PlateTracker.data.Models.TankMeasurementType", "TankMeasurementType")
                        .WithMany("TankMeasurementNominals")
                        .HasForeignKey("TankMeasurementTypeId")
                        .HasConstraintName("FK_TankMeasurementNominal_TankMeasurementType")
                        .IsRequired();

                    b.Navigation("TankMeasurementTankType");

                    b.Navigation("TankMeasurementType");
                });

            modelBuilder.Entity("PlateTracker.data.Models.TankMeasurementTankType", b =>
                {
                    b.HasOne("PlateTracker.data.Models.LineType", "LineType")
                        .WithMany("TankMeasurementTankTypes")
                        .HasForeignKey("LineTypeId")
                        .HasConstraintName("FK_TankMeasurementTankType_LineType")
                        .IsRequired();

                    b.Navigation("LineType");
                });

            modelBuilder.Entity("PlateTracker.data.Models.Employee", b =>
                {
                    b.Navigation("TankMeasurements");
                });

            modelBuilder.Entity("PlateTracker.data.Models.LineType", b =>
                {
                    b.Navigation("TankMeasurementTankTypes");
                });

            modelBuilder.Entity("PlateTracker.data.Models.TankMeasurementTankType", b =>
                {
                    b.Navigation("TankMeasurementNominals");

                    b.Navigation("TankMeasurements");
                });

            modelBuilder.Entity("PlateTracker.data.Models.TankMeasurementType", b =>
                {
                    b.Navigation("TankMeasurementNominals");

                    b.Navigation("TankMeasurements");
                });
#pragma warning restore 612, 618
        }
    }
}
